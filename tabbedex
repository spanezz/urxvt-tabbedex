#! perl
##
## TabbedEx plugin for rxvt-unicode
## Based on original tabbed plugin.
## Copyright (c) 2006-2012 tabbed authors
## Copyright (c) 2009-2013 tabbedex authors
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
##
## Modified by Michal Nazarewicz (mina86@mina86.com), StephenB
## (mail4stb/AT/gmail.com), Steven Merrill
## <steven dot merrill at gmail.com>, Mark Pustjens
## <pustjens@dds.nl> and more...
##
## Added by Michal Nazarewicz <mina86@mina86.com>:
##
## * Depending on time of last activity, activity character differs.
##   By default, after 4 seconds an asterisk becomes a plus sign,
##   after next 4 it becomes a colon, and finally, after another 8
##   seconds it becomes a dot.  This can be configured via
##   tabbar-timeouts resource.  It's format is:
##
##     ( <timeout> ":" <character> ":" )* <timeout> ":" <character> ":"
##
##   where <timeout> is timeout in seconds and <character> is a single
##   activity character.  If activity character is (, [, { or < it
##   will be used as left activity mark and matching character will be
##   used on the right side.
##
## * If bell is ringing on a given tab it is shown on the tab bar
##   using bell-{fg,bg} colours (if its inactive) or bell-tab-{fg,bg}
##   if its the current tab.
##
##   If bell is rung on an inactive cell it is said to be ringing
##   until that cell is selected.  If bell is rung on an active cell,
##   it is said to be ringing for bell-timeout seconds.
##
##   This functionality is actually even better than activity markers
##   if one adds \a to $PS1.
##
## * The "[NEW]" button can be disabled (who on Earth uses mouse to
##   create new tab anyways?) by setting new-button resource to yes.
##
## * If title resource is true, tab's title is displayed after last
##   button.  This is handy if you have terminal with no window
##   decorations.  Colours can be configured via title-fg and
##   title-bg.
##
## * Tabs are indexed in starting with zero hex. :] If you're such
##   a geek to use urxvt it shouldn't be a problem for you and it
##   saves few character when many tabs are opened.
##
## * As a minor modification: Final pipe character is removed (unless
##   title is displayed).  This make tab bar look nicer.
##
## Incorporated from Alexey Semenko <asemenko at gmail.com> patch:
##
## * autohide resource.  If it's true tab bar is hidden if there is
##   no more then one tab opened.
##
## Added by StephenB:
##
## * Tabs can be named with Shift+Up (Enter to confirm, Escape to
##   cancel).
##
## * "[NEW]" button disabled by default.
##
## Added by Steven Merrill <steven dot merrill at gmail.com>
##
## * Ability to start a new tab or cycle through tabs via user
##   commands: tabbedex:(new|next|prev)_tab .
##   e.g. (in .Xdefaults) URxvt.keysym.M-t: perl:tabbedex:new_tab
##   (see the urxvt man file for more info about keysym)
##
## * Fix an issue whereby on_user_command would not properly get sent
##   to other extension packages if the mouse was not over the urxvt
##   window.
##
## Added by Thomas Jost:
##
## * Add several user commands: tabbedex:rename_tab,
##   tabbedex:move_tab_(left|right).
##   e.g. (see 9.) URxvt.keysym.C-S-Left: perl:tabbex:move_tab_left
##
## * Ability to disable the default keybindings using the
##   no-tabbedex-keys resource.
##
## Added by xanf (Illya Klymov):
##
## * Ability to display non-latin characters in tab title.
##
## Added by jpkotta:
##
## * Tabs inherit command line options.
##
## Added by Mark Pustjens <pustjens@dds.nl>
##
## * Resources are now read respecting the -name option.
##
## * Ability to prevent the last tab from closing.
##   Use the following in your ~/.Xdefaults to enable:
##   URXvt.tabbed.reopen-on-close: yes
##
## * Ability to change resource name prefix used by tabbedex.  For
##   example, adding the following resource:
##     URXvt.tabbed.tabbedex-rs-prefix: tabbedex
##   will cause tabbedex to read "URXvt.tabbedex.*" resources.
##
##   [mina86@mina86.com: In original form, the change was hard-coded,
##    I've changed it so that it can be configured and thus not break
##    backwards compatibility with older tabbedex versions.]
##
## * Ability to blacklist more extensions from being loaded in the
##   slave tabs apart from the hard coded tabbedex.  This is done with
##   a perl-ext-blacklist resource, which is a comma separated list of
##   extensions that must not be loaded into the slave terminals.
##
## Added by Jim Diamond <Jim dot Diamond at acadiau dot ca>:
##
## * Previous versions did not autohide the tab bar if the remaining
##   tab had a name (as opposed to an index number).  I think "autohide"
##   means "autohide", so I changed that behaviour.
##
##   [mina86@mina86.com: Added a fix to temporarily show the tab bar
##    if renaming a tab.]
##
## * The name of the current tab can be changed with an escape sequence.
##     For example, the shell command
##         printf "\033]777;tabbedex;set_tab_name;work stuff\007"
##     would change the name of the current tab to "work stuff".
##
## * Previously, if you had a lot of tabs and/or tabs with long names,
##   the current tab might not show up in the tab bar (if its position
##   in the tab name string was more than $self->ncol chars from the
##   beginning).  Changes below ensure that the name of the current tab
##   is always visible.  Arguably it would be nice to have indications
##   at each end showing whether there are more tabs in that direction.
##
##   Also, when printing the tab bar, limit the length of the tab
##   names so that one tab name doesn't occupy the whole tab bar.
##
## * Preserve -e option when creating new tabs (not only the first
##   one).
##
## * Work around one or more bugs in urxvt V 9.12 which cause tabbed
##   terminals to open up too small and to ignore X geometry
##   resources.  These changes work for me with these choices:
##
##     fvwm2, Slackware64 13.37, my modified (narrowed) NeXT scrollbars.
##
##   I've tried a few other fonts, but the testing wasn't extensive.
##   For other scrollbar widths, you need to modify a paramter; see
##   the comments at the beginning of on_resize_all_windows().  Also,
##   I used some mystery offsets that worked for me.  YMMV.  (See the
##   comments and 5 and 27.)  NOTE: these changes work in 9.14 with
##   either of the patches suggested on 2011/01/05 on the rxvt-unicode
##   mailing list.  NOTE: these changes work in 9.15 with no patches
##   applied.
##
## * The previous version of on_start() threw away all of @argv up to
##   the "-e" (if it exists).  This tossed away arguments that I want,
##   most notably "-ls" and "-geometry <geometry>.  The code below
##   passes through everything except "-pe <arg>" and geometry.  If
##   other options are found to be problematic they will need to be
##   tossed too.  The other args are saved for all tabs, which may or
##   may not be desired in the case of
##
##     urxvt -pe tabbedex -e <some command>

use Encode qw(decode);

sub update_autohide {
   my ($self, $reconfigure) = @_;
   my $oldh = $self->{tabheight};
   if (!$self->{autohide} ||
       @{ $self->{tabs} } > 1 ||
       $self->{is_inputting_name}) {
      $self->{tabheight} = $self->{maxtabheight};
    } else {
      $self->{tabheight} = 0;
   }
   if ($reconfigure && $self->{tabheight} != $oldh) {
      $self->{needs_fixing} = 1;
      $self->configure;
      $self->on_resize_all_windows;
      $self->copy_properties;
   }
}


sub tab_bell_active ($$$) {
    my ($self, $tab, $now) = @_;
    if ($tab->{bell_rung}) {
        if ($tab == $self->{cur}) {
            return $now - $tab->{bell_rung} < $self->{bell_timeout};
        } else {
            return 1;
        }
    }
    return 0;
}

sub tab_activity_mark ($$;$) {
   my ($self, $tab, $now) = @_;
   return ' ' unless defined $tab->{last_activity};
   return ' ' if $tab == $self->{cur};
   $now = $now // int urxvt::NOW;
   if (defined $self->{timeouts}) {
      my $diff = $now - $tab->{last_activity};
      for my $spec (@{ $self->{timeouts} }) {
         return $spec->[1] if $diff >= $spec->[0];
      }
   }
   '*';
}

{

my %matching_activity_marks = (
    '[' => ']',
    '{' => '}',
    '(' => ')',
    '<' => '>',
);

sub matching_activity_mark {
    return $matching_activity_marks{$_[0]} // $_[0];
}

}


sub refresh {
   my ($self) = @_;

   # autohide makes it zero
   return unless $self->{tabheight};

   my $ncol = $self->ncol;

   my $text = " " x $ncol;
   my $rend = [($self->{rs_tabbar}) x $ncol];

   my ($ofs, $idx, @ofs) = (0, 0);

   if ($self->{new_button}) {
      substr $text, 0, 7, "[NEW] |";
      @$rend[0 .. 5] = ($self->{rs_tab}[1]) x 6;
      push @ofs, [0, 6, -1 ];
      $ofs = 7;
   }

   my $space_available = $ofs;
   my $max_len = int(($ncol - $ofs - 5) / ($#{ $self->{tabs} } > 1 ? 3 : 2));

   # See if the name of the current tab would be displayed;
   # if not, compute the number of tabs to skip so that the
   # name of the current tab will be displayed.
   my $len = $ofs;
   my @ends;
   for my $tab (@{ $self->{tabs} }) {
      my $name = substr($tab->{name} ? $tab->{name} : $idx, -$max_len);
      ++$idx;
      $len += length($name) + 3;        # '| ' and ' '
      if ($tab == $self->{cur}) {
         $idx = 0;
         if ($len > $ncol + 1) {
            for my $end (@ends) {
               ++$idx;
               if ($len - $end <= $ncol) {
                  last;
               }
            }
         }
         last;
      }
      push @ends, $len;
   }

   my $now = int urxvt::NOW;

   for (; $idx < @{ $self->{tabs} }; ++$idx) {
      my $tab = $self->{tabs}[$idx];
      my $name = substr($tab->{name} ? $tab->{name} : $idx, -$max_len);
      my $act = $self->tab_activity_mark($tab, $now);
      my $txt = sprintf "%s%s%s", $act, $name, matching_activity_mark $act;
      my $len = length $txt;

      substr $text, $ofs, $len + 1, "$txt|";

      my $color = $self->{rs_tab}[
         2 * $self->tab_bell_active($tab, $now) + ($tab == $self->{cur})
      ];
      if (defined $color) {
         @$rend[$ofs .. $ofs + $len - 1] = ($color) x $len;
      }

      push @ofs, [ $ofs, $ofs + $len, $idx ];
      $ofs += $len + 1;
   }

   substr $text, --$ofs, 1, ' '; # remove last '|'

   if ($self->{tab_title} && $ofs + 3 < $ncol) {
      my $term = $self->{term};
      my @str = $term->XGetWindowProperty($term->parent, $self->{tab_title});
      if (@str && $str[2]) {
         my $str = '| ' . decode("utf8", $str[2]);
         my $len = length $str;
         $len = $ncol - $ofs if $ofs + $len > $ncol;
         substr $text, $ofs, $len, substr $str, 0, $len;
         @$rend[$ofs + 2 .. $ofs + $len - 1] = ($self->{rs_title}) x ($len - 2);
      }
   }

   $self->{tabofs} = \@ofs;

   $self->ROW_t (0, $text, 0, 0, $ncol);
   $self->ROW_r (0, $rend, 0, 0, $ncol);

   $self->want_refresh;
}


sub new_tab {
   my ($self) = @_;
   my $oldtabheight = $self->{tabheight};

   unless ($self->{autohide} &&
           !(defined $self->{tabs} && @{ $self->{tabs} })) {
      $self->{tabheight} = $self->{maxtabheight}
   }

   if ($oldtabheight != $self->{tabheight}) {
       # We are about to use up a line for the tab bar.
       # Stretch the (outer) window.
       # Since the "needs fixing" code adds 1 to desired_rows
       # if we have a tab we don't need to change it here.
       $self->{needs_fixing} = 1;
       $self->on_resize_all_windows;
   }

   # save a backlink to us, make sure tabbedex is inactive
   push @urxvt::TERM_INIT, sub {
      my ($term) = @_;
      $term->{parent} = $self;

      for (0 .. urxvt::NUM_RESOURCES - 1) {
         my $value = $self->{resource}[$_];

         $term->resource ("+$_" => $value)
            if defined $value;
      }

      foreach my $opt (keys %urxvt::OPTION) {
          my $value = $self->{option}{$opt};
          $term->option($urxvt::OPTION{$opt}, $value);
      }

      $term->resource (perl_ext_2 =>
                       $term->resource ('perl_ext_2') .
                       $self->{perl_ext_blacklist});

      $self->register_keysyms($term);
   };

   push @urxvt::TERM_EXT, urxvt::ext::tabbedex::tab::;

   my $term = new urxvt::term
      $self->env, $urxvt::RXVTNAME,
      -embed => $self->parent,
      @{ $self->{argv} };
}


sub configure {
   my ($self) = @_;

   my $tab = $self->{cur};

   # this is an extremely dirty way to force a configurenotify, but who cares
   $tab->XMoveResizeWindow (
      $tab->parent,
      0, $self->{tabheight} + 1,
      $self->width, $self->height - $self->{tabheight}
   );
   $tab->XMoveResizeWindow (
      $tab->parent,
      0, $self->{tabheight},
      $self->width, $self->height - $self->{tabheight}
   );
}


sub copy_properties {
   my ($self) = @_;
   my $tab = $self->{cur};

   my $wm_normal_hints = $self->XInternAtom ("WM_NORMAL_HINTS");

   my $current = delete $self->{current_properties};

   # pass 1: copy over properties different or nonexisting
   for my $atom ($tab->XListProperties ($tab->parent)) {
      my ($type, $format, $items) = $self->XGetWindowProperty ($tab->parent,
                                                               $atom);

      # fix up size hints
      if ($atom == $wm_normal_hints) {
         my (@hints) = unpack "l!*", $items;

         $hints[$_] += $self->{tabheight} for (4, 6, 16);

         $items = pack "l!*", @hints;
      }

      my $cur = delete $current->{$atom};

      # update if changed, we assume empty items and zero type and
      # format will not happen
      $self->XChangeProperty ($self->parent, $atom, $type, $format, $items)
         if $cur->[0] != $type or $cur->[1] != $format or $cur->[2] ne $items;

      $self->{current_properties}{$atom} = [$type, $format, $items];
   }

   # pass 2, delete all extraneous properties
   $self->XDeleteProperty ($self->parent, $_) for keys %$current;
}


sub rs_text {
    my ($self, $name, $default) = @_;
    $self->x_resource ($self->{rs_prefix} . '.' . $name) // $default;
}

sub rs_bool {
    my ($self, $name, $default) = @_;
    my $val = $self->x_resource ($self->{rs_prefix} . '.' . $name);
    defined $val ? $val !~ /^(?:false|0|no)$/i : $default;
}

sub rs_color($$$$) {
    my ($self, $prefix, $def_fg, $def_bg) = @_;
    my $fg = $self->rs_text ($prefix . '-fg') // $def_fg;
    my $bg = $self->rs_text ($prefix . '-bg') // $def_bg;
    urxvt::SET_COLOR (urxvt::DEFAULT_RSTYLE, $fg + 2, $bg + 2);
}


sub make_current {
   my ($self, $tab) = @_;

   if (my $cur = $self->{cur}) {
      delete $cur->{last_activity};
      delete $cur->{bell_rung};
      $cur->XUnmapWindow ($cur->parent) if $cur->mapped;
      $cur->focus_out;
   }

   $self->{cur} = $tab;

   $self->configure;
   $self->copy_properties;

   $tab->focus_out; # just in case, should be a nop
   $tab->focus_in if $self->focus;

   $tab->XMapWindow ($tab->parent);
   delete $tab->{last_activity};
   delete $tab->{bell_rung};
   $self->refresh;

   ();
}


sub on_focus_in {
   my ($self, $event) = @_;
   $self->{cur}->focus_in;
   ();
}

sub on_focus_out {
   my ($self, $event) = @_;
   $self->{cur}->focus_out;
   ();
}

sub on_tt_write {
    my ($self, $octets) = @_;

    $self->{cur}->tt_write ($octets);

    1
}

sub on_key_press {
   my ($self, $event) = @_;
   $self->{cur}->key_press ($event->{state}, $event->{keycode}, $event->{time});
   1;
}

sub on_key_release {
   my ($self, $event) = @_;
   $self->{cur}->key_release ($event->{state}, $event->{keycode},
                              $event->{time});
   1;
}

sub on_button_release {
   my ($self, $event) = @_;

   if (!$self->{is_inputting_name} && $event->{row} == 0) {
      my $col = $event->{col};
      for my $button (@{ $self->{tabofs} }) {
         last if     $col <  $button->[0];
         next unless $col <= $button->[1];
         if ($button->[2] == -1) {
            $self->new_tab;
         } else {
            $self->make_current($self->{tabs}[$button->[2]]);
         }
      }
      return 1;
   }

   ();
}

sub register_keysyms {
    my ($self, $tab) = @_;
    if (!$self->{no_default_keys}) {
        $tab //= $self;
        $tab->parse_keysym('Shift-Left', 'perl:tabbedex:prev_tab');
        $tab->parse_keysym('Shift-Right', 'perl:tabbedex:next_tab');
        $tab->parse_keysym('Shift-Down', 'perl:tabbedex:new_tab');
        $tab->parse_keysym('Shift-Up', 'perl:tabbedex:rename_tab');
        $tab->parse_keysym('Control-Left', 'perl:tabbedex:move_tab_left');
        $tab->parse_keysym('Control-Right', 'perl:tabbedex:move_tab_right');
    }
}

sub on_init {
   my ($self) = @_;

   # This captures X resources but not a command-line geometry specification.
   my $geom = $self->x_resource("geometry");
   $self->{initial_geometry} = $geom;
   $self->{initial_int_bwidth} = $self->int_bwidth;

   $self->{resource} = [map $self->resource ("+$_"),
                            0 .. urxvt::NUM_RESOURCES - 1];

   $self->resource (int_bwidth => 0);
   $self->resource (pty_fd => -1);

   $self->{rs_prefix} = 'tabbed';
   $self->{rs_prefix} = $self->rs_text ('tabbedex-rs-prefix', 'tabbed');

   $self->{option} = {};
   for my $key (keys %urxvt::OPTION) {
       $self->{option}{$key} = $self->option($urxvt::OPTION{$key});
   }

   # this is for the tabs terminal; order is important
   $self->option ($urxvt::OPTION{scrollBar}, 0);

   $self->{rs_tabbar} = $self->rs_color ('tabbar', 3, 0);
   $self->{rs_title}  = $self->rs_color ('title', 2, 0);
   $self->{rs_tab}    = [
      undef,                              # inactive
      $self->rs_color ('tab', 0, 1),      # active
      $self->rs_color ('bell', 0, 3),     # bell ringing
      $self->rs_color ('bell-tab', 5, 4)  # active, bell ringing
   ];

   my $timeouts = $self->rs_text ("tabbar-timeouts");
   $timeouts = '16:.:8:::4:+' unless defined $timeouts;
   $timeouts = decode("utf8", $timeouts);
   if ($timeouts ne '') {
      my @timeouts;
      while ($timeouts =~ /^(\d+):(.)(?::(.*))?$/) {
         push @timeouts, [ int $1, $2 ];
         $timeouts = defined $3 ? $3 : '';
      }
      if (@timeouts) {
         $self->{timeouts} = [ sort { $b->[0] <=> $a-> [0] } @timeouts ];
      }
   }

   $self->{bell_timeout} = int($self->rs_text ('bell-timeout') // 1);

   $self->{new_button} = $self->rs_bool ('new-button', 0);
   $self->{tab_title} = $self->rs_bool ('title', 1);
   $self->{autohide} = $self->rs_bool ('autohide', 'false');
   $self->{no_default_keys} = $self->rs_bool ('no-tabbedex-keys', 0);
   $self->{reopen_on_close} = $self->rs_bool ('reopen-on-close', 0);

   $self->register_keysyms;

   my @blacklist = split(',', $self->rs_text ('perl-ext-blacklist'));
   $self->{perl_ext_blacklist} = join (',-', ',-tabbedex', @blacklist);

   ();
}


sub on_start {
   my ($self) = @_;

   $self->{maxtabheight} =
      $self->int_bwidth + $self->fheight + $self->lineSpace;
   $self->{tabheight} = $self->{autohide} ? 0 : $self->{maxtabheight};

   $self->{running_user_command} = 0;

   $self->cmd_parse ("\033[?25l");

   # JD: don't throw away all arguments, as original code did.
   # Instead, let most of them through.
   # Q: What shouldn't we pass through aside from "-pe <extensions>"?
   my @argv;
   my @tmp = $self->argv;
   shift @tmp;          # toss away argv[0] (== "urxvt" or similar).
   while (@tmp) {
       if ($tmp[0] =~ /^-(?:pe|w|b)$/) {
           shift @tmp;  # toss away options we probably don't want to pass
       } elsif ($tmp[0] eq "-geometry") {
           shift @tmp;
           $self->{initial_geometry} = $tmp[0];
       } else {
           push(@argv, $tmp[0]);
       }
       shift @tmp;
   }
   $self->{argv} = \@argv;

   if ($self->{tab_title}) {
      $self->{tab_title} = $self->{term}->XInternAtom("_NET_WM_NAME", 1);
   }

   $self->new_tab;

   if (defined $self->{timeouts}) {
      my $interval = ($self->{timeouts}[@{ $self->{timeouts} } - 1]->[0]);
      $interval = int($interval / 4);
      $self->{timer} = urxvt::timer->new
                                   ->interval($interval < 1 ? 1 : $interval)
                                   ->cb ( sub { $self->refresh; } );
   }

   ();
}


sub on_configure_notify {
   my ($self, $event) = @_;

   $self->configure;
   $self->refresh;

   ();
}


sub on_user_command {
    my $self = shift;
    $self->tab_user_command($self->{cur}, @_);
}


sub on_wm_delete_window {
   my ($self) = @_;
   $_->destroy for @{ $self->{tabs} };
   1;
}


sub tab_start {
   my ($self, $tab) = @_;

   $tab->XChangeInput ($tab->parent, urxvt::PropertyChangeMask);

   push @{ $self->{tabs} }, $tab;

#   $tab->{name} ||= scalar @{ $self->{tabs} };
   $self->make_current ($tab);

   ();
}


sub tab_destroy {
   my ($self, $tab) = @_;

   if ($self->{reopen_on_close} && $#{ $self->{tabs} } == 0) {
      $self->new_tab;
      $self->make_current ($self->{tabs}[-1]);
   }

   $self->{tabs} = [ grep $_ != $tab, @{ $self->{tabs} } ];
   $self->update_autohide (1);

   if (@{ $self->{tabs} }) {
      if ($self->{cur} == $tab) {
         delete $self->{cur};
         $self->make_current ($self->{tabs}[-1]);
      } else {
         $self->refresh;
      }
   } else {
      # delay destruction a tiny bit
      $self->{destroy} = urxvt::iw->new->start->cb (sub { $self->destroy });
   }

   ();
}


sub tab_property_notify {
   my ($self, $tab, $event) = @_;

   $self->copy_properties
      if $event->{window} == $tab->parent;

   ();
}


sub tab_bell {
    my ($self, $tab, $event) = @_;
    my $now = int urxvt::NOW;
    my $bell = $self->tab_bell_active($tab, $now);
    $tab->{bell_rung} = $now;
    $self->refresh if $bell ne $self->tab_bell_active($tab, $now);
    ();
}


sub tab_add_lines {
    my ($self, $tab) = @_;
    my $now = int urxvt::NOW;
    my $mark = $self->tab_activity_mark($tab, $now);
    $tab->{last_activity} = $now;
    $self->refresh if $mark ne $self->tab_activity_mark($tab, $now);
    ();
}


sub tab_user_command {
  my ($self, $tab, $cmd, $proxy_events) = @_;

  if ($cmd eq 'tabbedex:new_tab') {
    if (!$self->{is_inputting_name}) {
      $self->new_tab;
    }
  }
  elsif ($cmd eq 'tabbedex:next_tab') {
    $self->change_tab($tab, 1);
  }
  elsif ($cmd eq 'tabbedex:prev_tab') {
    $self->change_tab($tab, -1);
  }
  elsif ($cmd eq 'tabbedex:move_tab_left') {
    $self->move_tab($tab, -1);
  }
  elsif ($cmd eq 'tabbedex:move_tab_right') {
    $self->move_tab($tab, 1);
  }
  elsif ($cmd eq 'tabbedex:rename_tab') {
    $self->rename_tab($tab);
  }
  else {
    # Proxy the user command through to the tab's term, while taking care not
    # to get caught in an infinite loop.
    if ($proxy_events && $self->{running_user_command} == 0) {
      $self->{running_user_command} = 1;
      urxvt::invoke($tab->{term}, 20, $cmd);
      $self->{running_user_command} = 0;
    }
  }

  ();
}

sub change_tab {
    my ($self, $tab, $direction) = @_;

    if (!$self->{is_inputting_name} && @{ $self->{tabs} } > 1) {
        my $idx = 0;
        ++$idx while $self->{tabs}[$idx] != $tab;
        $idx += $direction;
        $self->make_current ($self->{tabs}[$idx % @{ $self->{tabs}}]);
    }

    ();
}

sub move_tab {
  my ($self, $tab, $direction) = @_;

  if (@{ $self->{tabs} } > 1) {
    my $idx1 = 0;
    ++$idx1 while $self->{tabs}[$idx1] != $tab;
    my $idx2 = ($idx1 + $direction) % @{ $self->{tabs} };

    ($self->{tabs}[$idx1], $self->{tabs}[$idx2]) =
        ($self->{tabs}[$idx2], $self->{tabs}[$idx1]);
    $self->make_current ($self->{tabs}[$idx2]);
  }

  ();
}

sub rename_tab {
    my ($self, $tab) = @_;

    if (!$self->{is_inputting_name}) {
        $self->{is_inputting_name} = 1;
        $tab->{old_name} = $tab->{name} ? $tab->{name} : "";
        $tab->{new_name} = "";
        $tab->{name} = "█";
        $self->update_autohide (1);
        $self->refresh;

        $tab->enable('key_press', sub {
            my ($tab, $event, $keysym, $str) = @_;

            if ($keysym == 0xff0d || $keysym == 0xff8d) { # enter
                $tab->{name} = $tab->{new_name};
                $self->{is_inputting_name} = 0;
                $tab->disable('key_press');
                $self->update_autohide (1);
            } elsif ($keysym == 0xff1b) { # escape
                $tab->{name} = $tab->{old_name};
                $self->{is_inputting_name} = 0;
                $self->update_autohide (1);
            } elsif ($keysym == 0xff08) { # backspace
                substr $tab->{new_name}, -1, 1, "";
                $tab->{name} = "$tab->{new_name}█";
            } elsif ($str !~ /[\x00-\x1f\x80-\xaf]/) {
                $tab->{new_name} .= $str;
                $tab->{name} = "$tab->{new_name}█";
            }
            $self->refresh;
            return 1;
        });
    }
}


# printf "\033]777;tabbedx;set_tab_name;new name\007"
sub tab_osc_seq_perl {
    my ($self, $tab, $osc) = @_;

    if ($osc =~ /^tabbedx;set_tab_name;(.*)$/) {
        if ($self->{is_inputting_name}) {
            $tab->{old_name} = $1;
        } else {
            $tab->{name} = $1;
        }
        $self->update_autohide (1);
        $self->refresh;
        1;
    }
}


sub on_resize_all_windows {
    my ($self, $width, $height) = @_;

   # In urxvt-9.12, the size as reported by $self->width apparently
   # includes the space used by the scroll bar and other padding.
   # I need to figure out how to calculate that in a robust way.
   # But for my personal version of the NeXT scrollbars, the following
   # seems to properly calculate the number of columns of text that
   # are missing.
   # (12 is the magic number I need to calculate.  This is apparently
   # the width of the scroll bar.  Maybe.)
   # TODO: take lineSpace and letterSpace into account.
   my $sb_width = 12;
   my $border_pixels = 2 * $self->{initial_int_bwidth} + $self->ext_bwidth;
   my $cols_eaten_by_sb = int(($sb_width + $border_pixels + $self->fwidth - 1)
                              / $self->fwidth);

   if ($self->{needs_fixing}) {
       my $selfterm = $self->{term};
       my $selfparent = $self->parent;
       my $rootwindow = $selfterm->DefaultRootWindow;
       my $x;
       my $y;

       $self->{needs_fixing} = 0;

       # Compute the diffs between what it should be and what it is.
       my $row_delta = $self->{    desired_rows} - $self->{term}->nrow;
       if ($self->{tabheight} > 0) {
           $row_delta += 1;
       }
       my $col_delta = $self->{desired_cols} - $self->{term}->ncol
           + $cols_eaten_by_sb;
       if ($row_delta != 0 || $col_delta != 0) {
       my $wid_delta = $col_delta * $self->fwidth;
       my $ht_delta = $row_delta * $self->fheight;
       # This only works for geometry specs whose X offset is of the form
       # +\d++\d+
       if ($self->{initial_geometry} =~ m/.*\+(.*)\+(.*)/) {
           $x = $1 + 5;     # Why + 5?  Dunno.
           $y = $2 + 27;    # Ditto.
       } else {
           ($x, $y) = $selfterm->XTranslateCoordinates($selfparent, $rootwindow,
                                                       0, 0);
       }
       # We will never want this again.  Lose it.
       $self->{initial_geometry} = "";
       $self->XMoveResizeWindow($selfparent, $x, $y,
                                $self->width + $wid_delta,
                                $self->height + $ht_delta);
       }
   } else {
       # The window changed size, (manually or because the tab bar was added).
       # Record the new "desired" size.
       $self->{desired_cols} = $self->{term}->ncol - $cols_eaten_by_sb;
       $self->{desired_rows} = $self->{term}->nrow;
       if ($self->{tabheight} > 0) {
           $self->{desired_rows} -= 1;
       }
   }

   1;
}


package urxvt::ext::tabbedex::tab;

# helper extension implementing the subwindows of a tabbed terminal.
# simply proxies all interesting calls back to the tabbedex class.

{
   for my $hook ( qw(start destroy user_command property_notify
                     add_lines bell osc_seq_perl) ) {
      eval qq{
         sub on_$hook {
            my \$parent = \$_[0]{term}{parent}
               or return;
            \$parent->tab_$hook (\@_)
         }
      };
      die if $@;
   }
}
